package main

import (
	"fmt"
	"image/color"
	"log"
	"net/url"
	"os"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

type Skill struct {
	Name  string
	Level int
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
type Project struct {
	Name         string
	Description  string
	Technologies []string
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã
type Experience struct {
	Position     string
	Company      string
	Period       string
	Description  string
	Achievements []string
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
type Education struct {
	Degree         string
	Institution    string
	Year           string
	Specialization string
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
type Contact struct {
	Email    string
	Phone    string
	Location string
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
type Certificate struct {
	Name   string
	Issuer string
	Year   string
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (—Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã!)
var ResumeData = struct {
	Name         string
	Title        string
	Summary      string
	Skills       []Skill
	Projects     []Project
	Experience   []Experience
	Education    []Education
	Certificates []Certificate
	Contact      Contact
	PhotoPath    string
}{
	Name:      "–î–µ–º–∏–¥ –ü—å—è–Ω–∫–æ–≤",
	Title:     "–ù–∞—á–∏–Ω–∞—é—â–∏–π Go —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
	PhotoPath: "photo.jpg",
	Summary: "–ó–∞–Ω–∏–º–∞—é—Å—å Go –ø–æ–ª–≥–æ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º, –µ—Å–ª–∏ –Ω–∞–¥–æ –º–æ–≥—É –∏ –≤ –±–µ–∫—ç–Ω–¥.\n " +
		"–£–º–µ—é —á–∏—Ç–∞—Ç—å –∫–æ–¥ –Ω–∞ Go –∏ Pythone.\n " +
		"–ì–æ—Ç–æ–≤ —É—á–∏—Ç—å—Å—è –Ω–æ–≤–æ–º—É, —É—á—É—Å—å –≤ –±—ã—Å—Ç—Ä–æ–º —Ç–µ–º–ø–µ.\n " +
		"–í –ø–ª–∞–Ω–∞—Ö –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –∑–∞–æ—á–∫—É –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç.\n ",

	Skills: []Skill{
		{"Go", 50},
		{"Python", 50},
		{"Git", 50},
		{"–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", 100},
		{"–°—Ç—Ä–µ–º–ª–µ–Ω–∏—è", 100},
		{"–ù–∞–≤—ã–∫ –æ–±—â–µ–Ω–∏—è", 100},
		{"–§–æ–∫—É—Å –Ω–∞ —Ü–µ–ª–∏", 100},
		{"–£–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å Ai", 100},
	},

	Projects: []Project{
		{
			Name:         "Maincraft-launcher",
			Description:  "–ë–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±",
			Technologies: []string{"Go", "–°", "fyne", "javascript"},
		},
	},

	Experience: []Experience{
		{
			Position:    "–ê—Å—Å–µ—Å–æ—Ä",
			Company:     "–Ø–Ω–¥–µ–∫—Å",
			Period:      "2023 - 2024",
			Description: "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ —Å–∞–π—Ç–æ–≤",
		},
	},

	Education: []Education{
		{
			Degree: "–°—Ä–µ–¥–Ω–µ–µ –Ω–µ–ø–æ–ª–Ω–æ–µ (11 –∫–ª–∞—Å—Å–æ–≤)",
		},
	},

	Certificates: []Certificate{
		{
			Name:   "PRO GO. –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
			Issuer: "Stepick",
			Year:   "2025",
		},
	},

	Contact: Contact{
		Email:    "just.wwwerty@gmail.com",
		Phone:    "+7 915 278 97 37",
		Location: "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, –†–æ—Å—Å–∏—è",
	},
}

func main() {
	myApp := app.New()
	myWindow := myApp.NewWindow("–†–µ–∑—é–º–µ - –î–µ–º–∏–¥ –ü—å—è–Ω–∫–æ–≤")
	myWindow.Resize(fyne.NewSize(1000, 700))

	tabs := container.NewAppTabs(
		createMainTab(),
		createSkillsTab(),
		createProjectsTab(),
		createExperienceTab(),
		createEducationTab(),
		createCertificatesTab(),
		createContactTab(),
	)

	myWindow.SetContent(tabs)
	myWindow.ShowAndRun()
}

func loadImage(path string) *canvas.Image {
	log.Printf("–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å: %s", path)

	// –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
	file, err := os.Open(path)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
		log.Printf("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª photo.jpg –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —á—Ç–æ –∏ main.go")
		return createDefaultAvatar()
	}
	defer file.Close()

	img := canvas.NewImageFromReader(file, "photo.jpg")
	img.SetMinSize(fyne.NewSize(150, 150))
	img.FillMode = canvas.ImageFillContain
	log.Printf("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
	return img
}

func createDefaultAvatar() *canvas.Image {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ —Ç–µ–º—ã
	avatar := canvas.NewImageFromResource(theme.AccountIcon())
	avatar.SetMinSize(fyne.NewSize(150, 150))
	avatar.FillMode = canvas.ImageFillContain
	return avatar
}

func createMainTab() *container.TabItem {
	title := canvas.NewText(ResumeData.Name, color.NRGBA{R: 0, G: 100, B: 200, A: 255})
	title.TextSize = 40
	title.TextStyle.Bold = true

	subtitle := canvas.NewText(ResumeData.Title, color.NRGBA{R: 100, G: 100, B: 100, A: 255})
	subtitle.TextSize = 25

	summary := widget.NewLabel(ResumeData.Summary)
	summary.Wrapping = fyne.TextWrapWord

	photo := loadImage(ResumeData.PhotoPath)

	summary = widget.NewLabel(ResumeData.Summary)
	summary.Wrapping = fyne.TextWrapWord

	contactInfo := widget.NewLabel(fmt.Sprintf(
		"üìß %s\nüìû %s\nüìç %s",
		ResumeData.Contact.Email,
		ResumeData.Contact.Phone,
		ResumeData.Contact.Location,
	))
	header := container.NewHBox(
		photo,
		container.NewVBox(
			title,
			subtitle,
			layout.NewSpacer(),
			summary,
		),
	)

	mainContent := container.NewVBox(
		header,
		layout.NewSpacer(),
		contactInfo,
	)

	return container.NewTabItem("–ì–ª–∞–≤–Ω–∞—è", mainContent)

}

func createSkillsTab() *container.TabItem {
	skillsContainer := container.NewVBox()
	skillsContainer.Add(widget.NewLabel("üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏:"))
	skillsContainer.Add(widget.NewSeparator())

	for _, skill := range ResumeData.Skills {
		// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
		progressBar := widget.NewProgressBar()
		progressBar.SetValue(float64(skill.Level) / 100) // –û—Ç–¥–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è

		skillRow := container.NewVBox(
			container.NewHBox(
				widget.NewLabel(fmt.Sprintf("‚Ä¢ %s", skill.Name)),
				layout.NewSpacer(),
				widget.NewLabel(fmt.Sprintf("%d%%", skill.Level)),
			),
			progressBar, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
		)
		skillsContainer.Add(skillRow)
		skillsContainer.Add(layout.NewSpacer())
	}

	scroll := container.NewScroll(skillsContainer)
	return container.NewTabItem("–ù–∞–≤—ã–∫–∏", scroll)
}

func createProjectsTab() *container.TabItem {
	projectsContainer := container.NewVBox()

	for i, project := range ResumeData.Projects {
		projectCard := widget.NewCard(
			fmt.Sprintf("üöÄ –ü—Ä–æ–µ–∫—Ç %d: %s", i+1, project.Name),
			project.Description,
			container.NewVBox(
				widget.NewLabel("üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:"),
				widget.NewLabel("  "+joinStrings(project.Technologies)),
			),
		)
		projectsContainer.Add(projectCard)
		projectsContainer.Add(layout.NewSpacer())
	}

	scroll := container.NewScroll(projectsContainer)
	return container.NewTabItem("–ü—Ä–æ–µ–∫—Ç—ã", scroll)
}

func createExperienceTab() *container.TabItem {
	expContainer := container.NewVBox()

	for _, exp := range ResumeData.Experience {
		achievements := ""
		for _, achievement := range exp.Achievements {
			achievements += fmt.Sprintf("‚Ä¢ %s\n", achievement)
		}

		expCard := widget.NewCard(
			fmt.Sprintf("üè¢ %s", exp.Company),
			fmt.Sprintf("üíº %s | üìÖ %s", exp.Position, exp.Period),
			container.NewVBox(
				widget.NewLabel(exp.Description),
				widget.NewSeparator(),
				widget.NewLabel(achievements),
			),
		)
		expContainer.Add(expCard)
		expContainer.Add(layout.NewSpacer())
	}

	scroll := container.NewScroll(expContainer)
	return container.NewTabItem("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", scroll)
}

func createEducationTab() *container.TabItem {
	eduContainer := container.NewVBox()

	for _, edu := range ResumeData.Education {
		eduCard := widget.NewCard(
			fmt.Sprintf("üéì %s", edu.Degree),
			edu.Institution,
			container.NewVBox(),
		)
		eduContainer.Add(eduCard)
		eduContainer.Add(layout.NewSpacer())
	}

	scroll := container.NewScroll(eduContainer)
	return container.NewTabItem("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", scroll)
}

func createCertificatesTab() *container.TabItem {
	certContainer := container.NewVBox()

	for _, cert := range ResumeData.Certificates {
		certCard := widget.NewCard(
			fmt.Sprintf("üìú %s", cert.Name),
			cert.Issuer,
			widget.NewLabel(fmt.Sprintf("üìÖ –ì–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è: %s", cert.Year)),
		)
		certContainer.Add(certCard)
		certContainer.Add(layout.NewSpacer())
	}

	scroll := container.NewScroll(certContainer)
	return container.NewTabItem("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", scroll)
}

func createContactTab() *container.TabItem {
	contact := ResumeData.Contact

	emailBtn := widget.NewButton("üìß Email: "+contact.Email, func() {
		openURL("mailto:" + contact.Email)
	})

	phoneBtn := widget.NewButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω: "+contact.Phone, func() {
		dialog.ShowInformation("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
			fmt.Sprintf("–¢–µ–ª–µ—Ñ–æ–Ω: %s\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS", contact.Phone),
			fyne.CurrentApp().Driver().AllWindows()[0])
	})

	locationBtn := widget.NewButton("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: "+contact.Location, func() {
		dialog.ShowInformation("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
			fmt.Sprintf("–ì–æ—Ä–æ–¥: %s\n–ì–æ—Ç–æ–≤ –∫ —Ä–µ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ", contact.Location),
			fyne.CurrentApp().Driver().AllWindows()[0])
	})

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ
	availabilityInfo := widget.NewCard(
		"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
		"–¢—Ä—É–¥–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è",
		widget.NewLabel("‚Ä¢ –ì–æ—Ç–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ\n‚Ä¢ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é —Ä–µ–ª–æ–∫–∞—Ü–∏—é\n‚Ä¢ –ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å"),
	)

	contactForm := container.NewVBox(
		widget.NewLabel("üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"),
		emailBtn,
		phoneBtn,
		locationBtn,
		layout.NewSpacer(),
		availabilityInfo,
	)

	return container.NewTabItem("–ö–æ–Ω—Ç–∞–∫—Ç—ã", contactForm)
}

func openURL(urlStr string) {
	u, err := url.Parse(urlStr)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è URL: %v\n", err)
		return
	}
	err = fyne.CurrentApp().OpenURL(u)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: %v\n", err)
	}
}

func joinStrings(strs []string) string {
	result := ""
	for i, s := range strs {
		if i > 0 {
			result += ", "
		}
		result += s
	}
	return result
}
